{
  "3f5d3ee4-47dd-428e-b9fd-fe554a82f576": {
    "id": "3f5d3ee4-47dd-428e-b9fd-fe554a82f576",
    "timestamp": "2025-07-18T00:13:52.843010",
    "diagram_type": "class",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\nclass User {\n+userId: String\n+name: String\n+email: String\n-password: String\n+login(password: String): Boolean\n+logout(): void\n+resetPassword(email: String): Boolean\n}\nclass Customer {\n+customerId: String\n+address: String\n+phoneNumber: String\n+membershipStatus: String\n+viewBookings(): void\n+makeBooking(car: Car): Booking\n+cancelBooking(booking: Booking): Boolean\n+updateProfile(address: String, phoneNumber: String): void\n}\nclass Admin {\n+adminId: String\n+role: String\n+contactNumber: String\n+accessLevel: Integer\n+manageUsers(): void\n+approveBooking(booking: Booking): Boolean\n+viewReports(): void\n+resetCustomerPassword(customer: Customer): Boolean\n}\nclass Booking {\n+bookingId: String\n+startDate: Date\n+endDate: Date\n+status: String\n+totalAmount: Double\n+confirmBooking(): Boolean\n+cancelBooking(): Boolean\n+modifyBooking(startDate: Date, endDate: Date): Boolean\n+getBookingDetails(): String\n}\nclass Car {\n+carId: String\n+model: String\n+licensePlate: String\n+isAvailable: Boolean\n+getAvailability(): Boolean\n+updateStatus(isAvailable: Boolean): void\n+assignBooking(booking: Booking): void\n+getCarDetails(): String\n}\n+providerName: String\n+transactionFee: Double\n+currency: String\n+processPayment(amount: Double, customer: Customer): Boolean\n+refundPayment(booking: Booking): Boolean\n+generateInvoice(booking: Booking): String\n+validateCard(cardNumber: String): Boolean\n}\nclass Helpfacility {\n+helpId: String\n+contactEmail: String\n+contactPhone: String\n+faqUrl: String\n+provideSupport(user: User): String\n+submitQuery(user: User, query: String): Boolean\n+getFAQ(): String\n+trackTicket(ticketId: String): String\n}\n' Inheritance\n' Associations\nclass Paymentsystem {\n  -paymentsystemId: string\n  +name: string\n  -isActive: boolean\n  +getPaymentsystemId(): string\n  +setName(name: string): void\n  +isValid(): boolean\n}\nUser <|-- Customer : extends\nUser <|-- Admin : extends\nCustomer \"1\" -- \"0..*\" Booking : makes\nBooking \"1\" -- \"1\" Car : reserves\nBooking \"1\" -- \"1\" PaymentSystem : uses\nCustomer \"1\" -- \"0..*\" PaymentSystem : paysWith\nAdmin \"1\" -- \"0..*\" Booking : manages\nUser \"1\" -- \"0..1\" Helpfacility : contacts\nHelpfacility \"1\" -- \"0..*\" Booking : assistsWith\n  --\nPaymentsystem -- Customer : interacts\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-18T00:13:52.843010"
  },
  "3b6adc4a-8e0a-4b3a-b5d0-199d8e7db770": {
    "id": "3b6adc4a-8e0a-4b3a-b5d0-199d8e7db770",
    "timestamp": "2025-07-18T00:13:52.844622",
    "diagram_type": "sequence",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\nparticipant Paymentsystem\n' Participant Declarations\nactor User\nactor Customer\nactor Admin\nparticipant Booking\nparticipant Car\nparticipant PaymentSystem\nparticipant Helpfacility\n== Customer Login Workflow ==\nUser -> Customer : Request login\nactivate Customer\nCustomer -> Booking : Display login page\nactivate Booking\nBooking --> Customer : Show login form\ndeactivate Booking\nCustomer -> Booking : Enter loginId and password\nactivate Booking\nBooking -> Customer : Confirm button clicked\nBooking -> Booking : Check required information\nalt Missing or invalid information\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nloop Retry login\nCustomer -> Booking : Re-enter loginId and password\nactivate Booking\nBooking -> Booking : Validate entered information\nalt Information valid\nBooking --> Customer : Login successful\ndeactivate Booking\nelse Information invalid\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nend\nend\nelse All information entered\nBooking -> Booking : Validate entered information\nalt Information valid\nBooking --> Customer : Login successful\ndeactivate Booking\nelse Information invalid\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nend\nend\n== Admin Login Workflow ==\nAdmin -> Booking : Display login page\nactivate Booking\nBooking --> Admin : Show login form\ndeactivate Booking\nAdmin -> Booking : Enter loginId and password\nactivate Booking\nBooking -> Admin : Confirm button clicked\nBooking -> Booking : Check required information\nalt Missing or invalid information\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nloop Retry login\nAdmin -> Booking : Re-enter loginId and password\nactivate Booking\nBooking -> Booking : Validate entered information\nalt Information valid\nBooking --> Admin : Login successful\ndeactivate Booking\nelse Information invalid\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nend\nend\nelse All information entered\nBooking -> Booking : Validate entered information\nalt Information valid\nBooking --> Admin : Login successful\ndeactivate Booking\nelse Information invalid\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nend\nend\n== Post-Login Parallel Actions ==\npar Customer actions\nCustomer -> Booking : Initiate car booking\nactivate Booking\nBooking -> Car : Check car availability\nactivate Car\nCar --> Booking : Car available\ndeactivate Car\nBooking --> Customer : Show available cars\ndeactivate Booking\nend\npar Admin actions\nAdmin -> Booking : Access admin dashboard\nactivate Booking\nBooking --> Admin : Show admin dashboard\ndeactivate Booking\nend\n== Payment and Help Facility ==\ngroup Payment Process\nCustomer -> PaymentSystem : Make payment\nactivate PaymentSystem\nPaymentSystem --> Customer : Payment confirmation\ndeactivate PaymentSystem\nend\ngroup Help Facility Usage\nCustomer -> Helpfacility : Request help\nactivate Helpfacility\nHelpfacility --> Customer : Provide assistance\ndeactivate Helpfacility\nend\n\n== Additional Interactions ==\nPaymentsystem -> Customer : performs action\nCustomer --> Paymentsystem : confirmation\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-18T00:13:52.844622"
  },
  "7b50f7e8-a314-4e6d-8332-3cc2588b819b": {
    "id": "7b50f7e8-a314-4e6d-8332-3cc2588b819b",
    "timestamp": "2025-07-18T00:13:55.477581",
    "diagram_type": "class",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\nclass User {\n+userId: String\n+name: String\n+email: String\n-password: String\n+login(password: String): Boolean\n+logout(): void\n+resetPassword(email: String): Boolean\n}\nclass Customer {\n+customerId: String\n+address: String\n+phoneNumber: String\n+membershipStatus: String\n+viewBookings(): void\n+makeBooking(car: Car): Booking\n+cancelBooking(booking: Booking): Boolean\n+updateProfile(address: String, phoneNumber: String): void\n}\nclass Admin {\n+adminId: String\n+role: String\n+contactNumber: String\n+accessLevel: Integer\n+manageUsers(): void\n+approveBooking(booking: Booking): Boolean\n+viewReports(): void\n+resetCustomerPassword(customer: Customer): Boolean\n}\nclass Booking {\n+bookingId: String\n+startDate: Date\n+endDate: Date\n+status: String\n+totalAmount: Double\n+confirmBooking(): Boolean\n+cancelBooking(): Boolean\n+modifyBooking(startDate: Date, endDate: Date): Boolean\n+getBookingDetails(): String\n}\nclass Car {\n+carId: String\n+model: String\n+licensePlate: String\n+isAvailable: Boolean\n+getAvailability(): Boolean\n+updateStatus(isAvailable: Boolean): void\n+assignBooking(booking: Booking): void\n+getCarDetails(): String\n}\n+providerName: String\n+transactionFee: Double\n+currency: String\n+processPayment(amount: Double, customer: Customer): Boolean\n+refundPayment(booking: Booking): Boolean\n+generateInvoice(booking: Booking): String\n+validateCard(cardNumber: String): Boolean\n}\nclass Helpfacility {\n+helpId: String\n+contactEmail: String\n+contactPhone: String\n+faqUrl: String\n+provideSupport(user: User): String\n+submitQuery(user: User, query: String): Boolean\n+getFAQ(): String\n+trackTicket(ticketId: String): String\n}\n' Inheritance\n' Associations\nclass Paymentsystem {\n  -paymentsystemId: string\n  +name: string\n  -isActive: boolean\n  +getPaymentsystemId(): string\n  +setName(name: string): void\n  +isValid(): boolean\n}\nUser <|-- Customer : extends\nUser <|-- Admin : extends\nCustomer \"1\" -- \"0..*\" Booking : makes\nBooking \"1\" -- \"1\" Car : reserves\nBooking \"1\" -- \"1\" PaymentSystem : uses\nCustomer \"1\" -- \"0..*\" PaymentSystem : paysWith\nAdmin \"1\" -- \"0..*\" Booking : manages\nUser \"1\" -- \"0..1\" Helpfacility : contacts\nHelpfacility \"1\" -- \"0..*\" Booking : assistsWith\n  --\nPaymentsystem -- Customer : interacts\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-18T00:13:55.477581"
  },
  "13d1f5d8-52e6-4518-a8ec-19a55d7b22af": {
    "id": "13d1f5d8-52e6-4518-a8ec-19a55d7b22af",
    "timestamp": "2025-07-18T00:13:59.054443",
    "diagram_type": "sequence",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\nparticipant Paymentsystem\n' Participant Declarations\nactor User\nactor Customer\nactor Admin\nparticipant Booking\nparticipant Car\nparticipant PaymentSystem\nparticipant Helpfacility\n== Customer Login Workflow ==\nUser -> Customer : Request login\nactivate Customer\nCustomer -> Booking : Display login page\nactivate Booking\nBooking --> Customer : Show login form\ndeactivate Booking\nCustomer -> Booking : Enter loginId and password\nactivate Booking\nBooking -> Customer : Confirm button clicked\nBooking -> Booking : Check required information\nalt Missing or invalid information\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nloop Retry login\nCustomer -> Booking : Re-enter loginId and password\nactivate Booking\nBooking -> Booking : Validate entered information\nalt Information valid\nBooking --> Customer : Login successful\ndeactivate Booking\nelse Information invalid\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nend\nend\nelse All information entered\nBooking -> Booking : Validate entered information\nalt Information valid\nBooking --> Customer : Login successful\ndeactivate Booking\nelse Information invalid\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nend\nend\n== Admin Login Workflow ==\nAdmin -> Booking : Display login page\nactivate Booking\nBooking --> Admin : Show login form\ndeactivate Booking\nAdmin -> Booking : Enter loginId and password\nactivate Booking\nBooking -> Admin : Confirm button clicked\nBooking -> Booking : Check required information\nalt Missing or invalid information\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nloop Retry login\nAdmin -> Booking : Re-enter loginId and password\nactivate Booking\nBooking -> Booking : Validate entered information\nalt Information valid\nBooking --> Admin : Login successful\ndeactivate Booking\nelse Information invalid\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nend\nend\nelse All information entered\nBooking -> Booking : Validate entered information\nalt Information valid\nBooking --> Admin : Login successful\ndeactivate Booking\nelse Information invalid\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nend\nend\n== Post-Login Parallel Actions ==\npar Customer actions\nCustomer -> Booking : Initiate car booking\nactivate Booking\nBooking -> Car : Check car availability\nactivate Car\nCar --> Booking : Car available\ndeactivate Car\nBooking --> Customer : Show available cars\ndeactivate Booking\nend\npar Admin actions\nAdmin -> Booking : Access admin dashboard\nactivate Booking\nBooking --> Admin : Show admin dashboard\ndeactivate Booking\nend\n== Payment and Help Facility ==\ngroup Payment Process\nCustomer -> PaymentSystem : Make payment\nactivate PaymentSystem\nPaymentSystem --> Customer : Payment confirmation\ndeactivate PaymentSystem\nend\ngroup Help Facility Usage\nCustomer -> Helpfacility : Request help\nactivate Helpfacility\nHelpfacility --> Customer : Provide assistance\ndeactivate Helpfacility\nend\n\n== Additional Interactions ==\nPaymentsystem -> Customer : performs action\nCustomer --> Paymentsystem : confirmation\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-18T00:13:59.054443"
  },
  "723f1100-dedc-4594-9098-2ce8abfa3f0a": {
    "id": "723f1100-dedc-4594-9098-2ce8abfa3f0a",
    "timestamp": "2025-07-18T00:21:32.639662",
    "diagram_type": "class",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\nclass User {\n+userId: String\n+name: String\n+email: String\n+password: String\n+isActive: Boolean\n+login(password: String): Boolean\n+logout(): void\n+resetPassword(newPassword: String): void\n}\nclass Customer {\n+customerId: String\n+address: String\n+phoneNumber: String\n+membershipLevel: String\n+accountStatus: String\n+makeBooking(car: Car, date: Date): Booking\n+viewBookings(): List<Booking>\n+cancelBooking(booking: Booking): Boolean\n+updateProfile(details: String): void\n}\nclass Admin {\n+adminId: String\n+role: String\n+contactNumber: String\n+lastLogin: Date\n+accessLevel: String\n+approveBooking(booking: Booking): Boolean\n+manageUser(user: User): void\n+generateReport(): String\n+resetUserPassword(user: User): void\n}\nclass Booking {\n+bookingId: String\n+bookingDate: Date\n+status: String\n+pickupLocation: String\n+dropoffLocation: String\n+confirmBooking(): Boolean\n+cancelBooking(): Boolean\n+updateStatus(newStatus: String): void\n+calculateFare(): Double\n}\nclass Car {\n+carId: String\n+model: String\n+licensePlate: String\n+isAvailable: Boolean\n+rentalRate: Double\n+updateAvailability(status: Boolean): void\n+assignToBooking(booking: Booking): void\n+getCarDetails(): String\n+scheduleMaintenance(date: Date): void\n}\n+providerName: String\n+supportedMethods: String\n+transactionFee: Double\n+currency: String\n+processPayment(amount: Double, customer: Customer): Boolean\n+refundPayment(booking: Booking): Boolean\n+validateCard(cardNumber: String): Boolean\n+generateInvoice(booking: Booking): String\n}\nclass Helpfacility {\n+helpId: String\n+contactEmail: String\n+contactPhone: String\n+faqUrl: String\n+supportHours: String\n+provideSupport(user: User): String\n+submitTicket(user: User, issue: String): String\n+viewFAQs(): String\n+trackTicket(ticketId: String): String\n}\n' Inheritance\n' Associations\nclass Paymentsystem {\n  -paymentsystemId: string\n  +name: string\n  -isActive: boolean\n  +getPaymentsystemId(): string\n  +setName(name: string): void\n  +isValid(): boolean\n}\nUser <|-- Customer : extends\nUser <|-- Admin : extends\nCustomer \"1\" -- \"0..*\" Booking : makes\nBooking \"1\" -- \"1\" Car : reserves\nBooking \"1\" -- \"1\" PaymentSystem : paidBy\nCustomer \"1\" -- \"0..*\" PaymentSystem : uses\nAdmin \"1\" -- \"0..*\" Booking : manages\nUser \"1\" -- \"0..*\" Helpfacility : contacts\nHelpfacility \"1\" -- \"0..*\" Booking : assistsWith\n  --\nPaymentsystem -- Customer : interacts\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-18T00:21:32.639662"
  },
  "ee57eaa6-f417-4f8a-9d75-cd549855ebfa": {
    "id": "ee57eaa6-f417-4f8a-9d75-cd549855ebfa",
    "timestamp": "2025-07-18T00:21:32.642350",
    "diagram_type": "sequence",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\nparticipant Paymentsystem\n' Participant Declarations\nactor User\nactor Customer\nactor Admin\nparticipant Booking\nparticipant Car\nparticipant PaymentSystem\nparticipant Helpfacility\n== Customer Login Workflow ==\nUser -> Customer : Request login\nactivate Customer\nCustomer -> Booking : Display login page\nactivate Booking\nBooking --> Customer : Show login form\ndeactivate Booking\nCustomer -> Booking : Enter loginId, password\nactivate Booking\nCustomer -> Booking : Click confirm\nBooking -> Booking : Check required information\nalt Missing or invalid information\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nloop Retry login\nCustomer -> Booking : Enter loginId, password\nactivate Booking\nCustomer -> Booking : Click confirm\nBooking -> Booking : Check required information\nalt Still invalid\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nelse Valid information\nBooking -> Booking : Validate credentials\nBooking --> Customer : Login successful\ndeactivate Booking\nend\nend\nelse All information entered\nBooking -> Booking : Validate credentials\nalt Credentials valid\nBooking --> Customer : Login successful\ndeactivate Booking\nelse Credentials invalid\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nend\nend\n== Admin Login Workflow ==\nAdmin -> Booking : Display login page\nactivate Booking\nBooking --> Admin : Show login form\ndeactivate Booking\nAdmin -> Booking : Enter loginId, password\nactivate Booking\nAdmin -> Booking : Click confirm\nBooking -> Booking : Check required information\nalt Missing or invalid information\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nloop Retry login\nAdmin -> Booking : Enter loginId, password\nactivate Booking\nAdmin -> Booking : Click confirm\nBooking -> Booking : Check required information\nalt Still invalid\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nelse Valid information\nBooking -> Booking : Validate credentials\nBooking --> Admin : Login successful\ndeactivate Booking\nend\nend\nelse All information entered\nBooking -> Booking : Validate credentials\nalt Credentials valid\nBooking --> Admin : Login successful\ndeactivate Booking\nelse Credentials invalid\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nend\nend\n== Parallel Post-Login Actions ==\npar Customer actions\nCustomer -> Booking : Make booking request\nactivate Booking\nBooking -> Car : Check car availability\nactivate Car\nCar --> Booking : Car available\ndeactivate Car\nBooking -> PaymentSystem : Process payment\nactivate PaymentSystem\nPaymentSystem --> Booking : Payment confirmation\ndeactivate PaymentSystem\nBooking --> Customer : Booking confirmed\ndeactivate Booking\nend\npar Admin actions\nAdmin -> Booking : View booking logs\nactivate Booking\nBooking --> Admin : Display logs\ndeactivate Booking\nend\npar Help facility access\nCustomer -> Helpfacility : Request help\nactivate Helpfacility\nHelpfacility --> Customer : Provide assistance\ndeactivate Helpfacility\nend\n\n== Additional Interactions ==\nPaymentsystem -> Customer : performs action\nCustomer --> Paymentsystem : confirmation\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-18T00:21:32.642350"
  },
  "93f39c46-5db4-4dfa-8000-89094ede7a70": {
    "id": "93f39c46-5db4-4dfa-8000-89094ede7a70",
    "timestamp": "2025-07-18T00:21:38.290239",
    "diagram_type": "sequence",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\nparticipant Paymentsystem\n' Participant Declarations\nactor User\nactor Customer\nactor Admin\nparticipant Booking\nparticipant Car\nparticipant PaymentSystem\nparticipant Helpfacility\n== Customer Login Workflow ==\nUser -> Customer : Request login\nactivate Customer\nCustomer -> Booking : Display login page\nactivate Booking\nBooking --> Customer : Show login form\ndeactivate Booking\nCustomer -> Booking : Enter loginId, password\nactivate Booking\nCustomer -> Booking : Click confirm\nBooking -> Booking : Check required information\nalt Missing or invalid information\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nloop Retry login\nCustomer -> Booking : Enter loginId, password\nactivate Booking\nCustomer -> Booking : Click confirm\nBooking -> Booking : Check required information\nalt Still invalid\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nelse Valid information\nBooking -> Booking : Validate credentials\nBooking --> Customer : Login successful\ndeactivate Booking\nend\nend\nelse All information entered\nBooking -> Booking : Validate credentials\nalt Credentials valid\nBooking --> Customer : Login successful\ndeactivate Booking\nelse Credentials invalid\nBooking --> Customer : Prompt to re-enter details\ndeactivate Booking\nend\nend\n== Admin Login Workflow ==\nAdmin -> Booking : Display login page\nactivate Booking\nBooking --> Admin : Show login form\ndeactivate Booking\nAdmin -> Booking : Enter loginId, password\nactivate Booking\nAdmin -> Booking : Click confirm\nBooking -> Booking : Check required information\nalt Missing or invalid information\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nloop Retry login\nAdmin -> Booking : Enter loginId, password\nactivate Booking\nAdmin -> Booking : Click confirm\nBooking -> Booking : Check required information\nalt Still invalid\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nelse Valid information\nBooking -> Booking : Validate credentials\nBooking --> Admin : Login successful\ndeactivate Booking\nend\nend\nelse All information entered\nBooking -> Booking : Validate credentials\nalt Credentials valid\nBooking --> Admin : Login successful\ndeactivate Booking\nelse Credentials invalid\nBooking --> Admin : Prompt to re-enter details\ndeactivate Booking\nend\nend\n== Parallel Post-Login Actions ==\npar Customer actions\nCustomer -> Booking : Make booking request\nactivate Booking\nBooking -> Car : Check car availability\nactivate Car\nCar --> Booking : Car available\ndeactivate Car\nBooking -> PaymentSystem : Process payment\nactivate PaymentSystem\nPaymentSystem --> Booking : Payment confirmation\ndeactivate PaymentSystem\nBooking --> Customer : Booking confirmed\ndeactivate Booking\nend\npar Admin actions\nAdmin -> Booking : View booking logs\nactivate Booking\nBooking --> Admin : Display logs\ndeactivate Booking\nend\npar Help facility access\nCustomer -> Helpfacility : Request help\nactivate Helpfacility\nHelpfacility --> Customer : Provide assistance\ndeactivate Helpfacility\nend\n\n== Additional Interactions ==\nPaymentsystem -> Customer : performs action\nCustomer --> Paymentsystem : confirmation\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-18T00:21:38.290239"
  },
  "e26890ae-2632-4e88-a553-67555ef64622": {
    "id": "e26890ae-2632-4e88-a553-67555ef64622",
    "timestamp": "2025-07-18T00:21:51.683854",
    "diagram_type": "class",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\nclass User {\n+userId: String\n+name: String\n+email: String\n+password: String\n+isActive: Boolean\n+login(password: String): Boolean\n+logout(): void\n+resetPassword(newPassword: String): void\n}\nclass Customer {\n+customerId: String\n+address: String\n+phoneNumber: String\n+membershipLevel: String\n+accountStatus: String\n+makeBooking(car: Car, date: Date): Booking\n+viewBookings(): List<Booking>\n+cancelBooking(booking: Booking): Boolean\n+updateProfile(details: String): void\n}\nclass Admin {\n+adminId: String\n+role: String\n+contactNumber: String\n+lastLogin: Date\n+accessLevel: String\n+approveBooking(booking: Booking): Boolean\n+manageUser(user: User): void\n+generateReport(): String\n+resetUserPassword(user: User): void\n}\nclass Booking {\n+bookingId: String\n+bookingDate: Date\n+status: String\n+pickupLocation: String\n+dropoffLocation: String\n+confirmBooking(): Boolean\n+cancelBooking(): Boolean\n+updateStatus(newStatus: String): void\n+calculateFare(): Double\n}\nclass Car {\n+carId: String\n+model: String\n+licensePlate: String\n+isAvailable: Boolean\n+rentalRate: Double\n+updateAvailability(status: Boolean): void\n+assignToBooking(booking: Booking): void\n+getCarDetails(): String\n+scheduleMaintenance(date: Date): void\n}\n+providerName: String\n+supportedMethods: String\n+transactionFee: Double\n+currency: String\n+processPayment(amount: Double, customer: Customer): Boolean\n+refundPayment(booking: Booking): Boolean\n+validateCard(cardNumber: String): Boolean\n+generateInvoice(booking: Booking): String\n}\nclass Helpfacility {\n+helpId: String\n+contactEmail: String\n+contactPhone: String\n+faqUrl: String\n+supportHours: String\n+provideSupport(user: User): String\n+submitTicket(user: User, issue: String): String\n+viewFAQs(): String\n+trackTicket(ticketId: String): String\n}\n' Inheritance\n' Associations\nclass Paymentsystem {\n  -paymentsystemId: string\n  +name: string\n  -isActive: boolean\n  +getPaymentsystemId(): string\n  +setName(name: string): void\n  +isValid(): boolean\n}\nUser <|-- Customer : extends\nUser <|-- Admin : extends\nCustomer \"1\" -- \"0..*\" Booking : makes\nBooking \"1\" -- \"1\" Car : reserves\nBooking \"1\" -- \"1\" PaymentSystem : paidBy\nCustomer \"1\" -- \"0..*\" PaymentSystem : uses\nAdmin \"1\" -- \"0..*\" Booking : manages\nUser \"1\" -- \"0..*\" Helpfacility : contacts\nHelpfacility \"1\" -- \"0..*\" Booking : assistsWith\n  --\nPaymentsystem -- Customer : interacts\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-18T00:21:51.683854"
  }
}