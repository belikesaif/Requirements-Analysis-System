{
  "13ec0ee9-5ff6-44c5-998b-85d5ae4c3ed4": {
    "id": "13ec0ee9-5ff6-44c5-998b-85d5ae4c3ed4",
    "timestamp": "2025-07-05T14:54:21.019718",
    "diagram_type": "class",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\n' User base class\nclass User {\n+userId: String\n+name: String\n+email: String\n-password: String\n+isActive: Boolean\n+login(password: String): Boolean\n+logout(): void\n+viewProfile(): void\n}\n' Member inherits from User\nclass Member {\n+membershipId: String\n+address: String\n+phoneNumber: String\n+membershipStatus: String\n+loginAttempts: Integer\n+clickLoginButton(): void\n+enterCredentials(loginId: String, password: String): void\n+confirmLogin(): Boolean\n+viewUserDetails(): void\n+reenterDetails(): void\n}\n' Guest inherits from User\nclass Guest {\n+guestId: String\n+visitDate: Date\n+purpose: String\n+sessionActive: Boolean\n+register(): Boolean\n+browseCatalog(): void\n+requestMembership(): Boolean\n+viewBookInfo(book: Book): void\n}\n' Administrator inherits from User\nclass Administrator {\n+adminId: String\n+role: String\n+accessLevel: Integer\n+lastLogin: Date\n+manageUsers(): void\n+resetPassword(user: User): void\n+viewSystemLogs(): void\n+updateSettings(): void\n}\n' Librarian inherits from User\nclass Librarian {\n+employeeId: String\n+shift: String\n+assignedSection: String\n+contactNumber: String\n+issueBook(member: Member, book: Book): Boolean\n+returnBook(member: Member, book: Book): Boolean\n+manageInventory(): void\n+viewMemberDetails(member: Member): void\n}\nclass Book {\n+bookId: String\n+title: String\n+author: String\n+isAvailable: Boolean\n+publicationYear: Integer\n+checkAvailability(): Boolean\n+reserveBook(member: Member): Boolean\n+borrowBook(member: Member): Boolean\n+returnBook(member: Member): Boolean\n}\n' Inheritance relationships\nUser <|-- Member : extends\nUser <|-- Guest : extends\nUser <|-- Administrator : extends\nUser <|-- Librarian : extends\n' Associations\nMember --> \"1\" User : isA\nMember --> \"0..*\" Book : borrows/reserves\nGuest --> \"0..*\" Book : views\nAdministrator --> \"0..*\" User : manages\nLibrarian --> \"0..*\" Book : manages\nLibrarian --> \"0..*\" Member : assists\nBook --> \"1\" Librarian : managedBy\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-05T14:54:21.019718"
  },
  "39718cea-75bf-4a60-a130-1f7f187a6dad": {
    "id": "39718cea-75bf-4a60-a130-1f7f187a6dad",
    "timestamp": "2025-07-05T14:54:21.022045",
    "diagram_type": "sequence",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\nactor Administrator\nactor User\nactor Librarian\nparticipant Member\nparticipant Guest\nparticipant Book\n== Authentication/Login Flow ==\nMember -> Guest : click_login_button()\nactivate Guest\nGuest --> Member : display_login_page()\ndeactivate Guest\nMember -> Guest : enter_credentials(loginId, password)\nactivate Guest\nGuest --> Member : credentials_received()\ndeactivate Guest\nMember -> Guest : click_confirm_button()\nactivate Guest\nGuest -> User : check_required_information(credentials)\nactivate User\nUser --> Guest : required_info_status(valid/invalid)\ndeactivate User\nalt Invalid Information\nGuest -> Member : request_reenter_details()\nMember --> Guest : reenter_details()\nelse Valid Information\nGuest -> User : validate_credentials(credentials)\nactivate User\nUser --> Guest : validation_result(success/failure)\ndeactivate User\nend\nGuest -> Member : login_status(success/failure)\ndeactivate Guest\n== Main Business Process ==\nMember -> User : click_view_user_details()\nactivate User\nUser -> Librarian : request_user_details(memberId)\nactivate Librarian\nLibrarian --> User : provide_user_details(userData)\ndeactivate Librarian\nUser --> Member : display_user_details(userData)\ndeactivate User\nMember -> Book : request_borrow_book(bookId)\nactivate Book\nBook --> Member : book_availability_status(available/unavailable)\ndeactivate Book\nBook -> Librarian : notify_borrow_request(memberId, bookId)\nactivate Librarian\nLibrarian --> Book : borrow_request_acknowledged()\ndeactivate Librarian\nBook -> User : update_borrow_status(memberId, bookId)\nactivate User\nUser --> Book : borrow_status_updated()\ndeactivate User\n== Data Processing/Validation Steps ==\nLibrarian -> Administrator : report_borrow_activity(memberId, bookId)\nactivate Administrator\nAdministrator --> Librarian : activity_reported_confirmation()\ndeactivate Administrator\nAdministrator -> User : audit_user_activity(memberId)\nactivate User\nUser --> Administrator : audit_report(userActivity)\ndeactivate User\nAdministrator -> Book : verify_book_inventory()\nactivate Book\nBook --> Administrator : inventory_status()\ndeactivate Book\n== Administrative Actions ==\nAdministrator -> Librarian : request_overdue_report()\nactivate Librarian\nLibrarian --> Administrator : overdue_report(reportData)\ndeactivate Librarian\nAdministrator -> Guest : review_guest_access_logs()\nactivate Guest\nGuest --> Administrator : guest_access_logs(logData)\ndeactivate Guest\nLibrarian -> Member : notify_due_date(bookId, dueDate)\nactivate Member\nMember --> Librarian : due_date_acknowledged()\ndeactivate Member\nUser -> Guest : request_guest_feedback()\nactivate Guest\nGuest --> User : guest_feedback(feedbackData)\ndeactivate Guest\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-05T14:54:21.022045"
  },
  "3a6cb7ab-f5fb-4a47-812b-98cead6cbf27": {
    "id": "3a6cb7ab-f5fb-4a47-812b-98cead6cbf27",
    "timestamp": "2025-07-05T14:54:36.757837",
    "diagram_type": "class",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\n' User base class\nclass User {\n+userId: String\n+name: String\n+email: String\n-password: String\n+isActive: Boolean\n+login(password: String): Boolean\n+logout(): void\n+viewProfile(): void\n}\n' Member inherits from User\nclass Member {\n+membershipId: String\n+address: String\n+phoneNumber: String\n+membershipStatus: String\n+loginAttempts: Integer\n+clickLoginButton(): void\n+enterCredentials(loginId: String, password: String): void\n+confirmLogin(): Boolean\n+viewUserDetails(): void\n+reenterDetails(): void\n}\n' Guest inherits from User\nclass Guest {\n+guestId: String\n+visitDate: Date\n+purpose: String\n+sessionActive: Boolean\n+register(): Boolean\n+browseCatalog(): void\n+requestMembership(): Boolean\n+viewBookInfo(book: Book): void\n}\n' Administrator inherits from User\nclass Administrator {\n+adminId: String\n+role: String\n+accessLevel: Integer\n+lastLogin: Date\n+manageUsers(): void\n+resetPassword(user: User): void\n+viewSystemLogs(): void\n+updateSettings(): void\n}\n' Librarian inherits from User\nclass Librarian {\n+employeeId: String\n+shift: String\n+assignedSection: String\n+contactNumber: String\n+issueBook(member: Member, book: Book): Boolean\n+returnBook(member: Member, book: Book): Boolean\n+manageInventory(): void\n+viewMemberDetails(member: Member): void\n}\nclass Book {\n+bookId: String\n+title: String\n+author: String\n+isAvailable: Boolean\n+publicationYear: Integer\n+checkAvailability(): Boolean\n+reserveBook(member: Member): Boolean\n+borrowBook(member: Member): Boolean\n+returnBook(member: Member): Boolean\n}\n' Inheritance relationships\nUser <|-- Member : extends\nUser <|-- Guest : extends\nUser <|-- Administrator : extends\nUser <|-- Librarian : extends\n' Associations\nMember --> \"1\" User : isA\nMember --> \"0..*\" Book : borrows/reserves\nGuest --> \"0..*\" Book : views\nAdministrator --> \"0..*\" User : manages\nLibrarian --> \"0..*\" Book : manages\nLibrarian --> \"0..*\" Member : assists\nBook --> \"1\" Librarian : managedBy\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-05T14:54:36.757837"
  },
  "76601938-3964-434f-ac41-84849eddc3b3": {
    "id": "76601938-3964-434f-ac41-84849eddc3b3",
    "timestamp": "2025-07-05T14:54:40.886869",
    "diagram_type": "sequence",
    "error_type": "syntax_validation",
    "error_message": "PlantUML syntax errors: PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'",
    "plantuml_code": "@startuml\nactor Administrator\nactor User\nactor Librarian\nparticipant Member\nparticipant Guest\nparticipant Book\n== Authentication/Login Flow ==\nMember -> Guest : click_login_button()\nactivate Guest\nGuest --> Member : display_login_page()\ndeactivate Guest\nMember -> Guest : enter_credentials(loginId, password)\nactivate Guest\nGuest --> Member : credentials_received()\ndeactivate Guest\nMember -> Guest : click_confirm_button()\nactivate Guest\nGuest -> User : check_required_information(credentials)\nactivate User\nUser --> Guest : required_info_status(valid/invalid)\ndeactivate User\nalt Invalid Information\nGuest -> Member : request_reenter_details()\nMember --> Guest : reenter_details()\nelse Valid Information\nGuest -> User : validate_credentials(credentials)\nactivate User\nUser --> Guest : validation_result(success/failure)\ndeactivate User\nend\nGuest -> Member : login_status(success/failure)\ndeactivate Guest\n== Main Business Process ==\nMember -> User : click_view_user_details()\nactivate User\nUser -> Librarian : request_user_details(memberId)\nactivate Librarian\nLibrarian --> User : provide_user_details(userData)\ndeactivate Librarian\nUser --> Member : display_user_details(userData)\ndeactivate User\nMember -> Book : request_borrow_book(bookId)\nactivate Book\nBook --> Member : book_availability_status(available/unavailable)\ndeactivate Book\nBook -> Librarian : notify_borrow_request(memberId, bookId)\nactivate Librarian\nLibrarian --> Book : borrow_request_acknowledged()\ndeactivate Librarian\nBook -> User : update_borrow_status(memberId, bookId)\nactivate User\nUser --> Book : borrow_status_updated()\ndeactivate User\n== Data Processing/Validation Steps ==\nLibrarian -> Administrator : report_borrow_activity(memberId, bookId)\nactivate Administrator\nAdministrator --> Librarian : activity_reported_confirmation()\ndeactivate Administrator\nAdministrator -> User : audit_user_activity(memberId)\nactivate User\nUser --> Administrator : audit_report(userActivity)\ndeactivate User\nAdministrator -> Book : verify_book_inventory()\nactivate Book\nBook --> Administrator : inventory_status()\ndeactivate Book\n== Administrative Actions ==\nAdministrator -> Librarian : request_overdue_report()\nactivate Librarian\nLibrarian --> Administrator : overdue_report(reportData)\ndeactivate Librarian\nAdministrator -> Guest : review_guest_access_logs()\nactivate Guest\nGuest --> Administrator : guest_access_logs(logData)\ndeactivate Guest\nLibrarian -> Member : notify_due_date(bookId, dueDate)\nactivate Member\nMember --> Librarian : due_date_acknowledged()\ndeactivate Member\nUser -> Guest : request_guest_feedback()\nactivate Guest\nGuest --> User : guest_feedback(feedbackData)\ndeactivate Guest\n@enduml",
    "retry_count": 0,
    "validation_status": {
      "is_valid": false,
      "errors": [
        "PlantUML validation failed: 500: PlantUML validation failed: 'DiagramService' object has no attribute 'validate_plantuml_syntax'"
      ]
    },
    "stored_date": "2025-07-05T14:54:40.886869"
  }
}